package com.foru.blog.config.handler;import com.foru.blog.config.properties.MyBlogProperties;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.security.web.authentication.rememberme.PersistentRememberMeToken;import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;import org.springframework.stereotype.Component;import java.util.*;import java.util.concurrent.TimeUnit;/** * @ClassName RedisTokenRepositoryImpl * @Author 9527 */@Component@Slf4jpublic class RedisTokenRepositoryHandler implements PersistentTokenRepository {    private RedisTemplate redisTemplate;    private MyBlogProperties properties;    @Autowired    public RedisTokenRepositoryHandler(RedisTemplate redisTemplate, MyBlogProperties properties) {        this.redisTemplate = redisTemplate;        this.properties = properties;    }    @Override    public void createNewToken(PersistentRememberMeToken token) {        //token包括username,series, tokenValue,date 4个属性;        //生成一个存储Token信息的Key        String key = generateKey(token.getSeries());        //生成一个存储series的key,因为下面removeToken传入的参数为username,所以用username生成一个key来获取唯一的series        //先存储usernamekey        String usernamekey=generateKey(token.getUsername());        redisTemplate.opsForValue().set(usernamekey,token.getSeries());        redisTemplate.expire(usernamekey,properties.getRememberMeTokenValiditySeconds(), TimeUnit.SECONDS);        //创建一个hashmap        Map<String,String> map=new HashMap<>();        map.put("username",token.getUsername());        map.put("tokenValue",token.getTokenValue());        map.put("date",String.valueOf(token.getDate().getTime()));        map.put("series",token.getSeries());        //将Token数据存入redis        redisTemplate.opsForHash().putAll(key,map);        redisTemplate.expire(key,properties.getRememberMeTokenValiditySeconds(), TimeUnit.SECONDS);    }    @Override    public void updateToken(String series, String tokenValue, Date lastUsed) {        String key = generateKey(series);        if (redisTemplate.hasKey(key))        {            redisTemplate.opsForHash().put(key,"tokenValue",tokenValue);            redisTemplate.opsForHash().put(key,"date",String.valueOf(lastUsed.getTime()));        }    }    @Override    public PersistentRememberMeToken getTokenForSeries(String seriesId) {        String key = generateKey(seriesId);        //创建一个ArrayList用来获取多个value        List<String> hashKeys = new ArrayList<>();        hashKeys.add("username");        hashKeys.add("tokenValue");        hashKeys.add("date");        List<String> hashValues = redisTemplate.opsForHash().multiGet(key, hashKeys);        String username =  hashValues.get(0);        String tokenValue = hashValues.get(1);        String date = hashValues.get(2);        if (null == username || null == tokenValue || null == date) {            return null;        }        Long timestamp = Long.valueOf(date);        Date time = new Date(timestamp);        return new PersistentRememberMeToken(username, seriesId, tokenValue, time);    }    @Override    public void removeUserTokens(String username) {        if (log.isDebugEnabled()) {            log.debug("token remove username: [{}]", username);        }        String userNameKey=generateKey(username);        Object o = redisTemplate.opsForValue().get(userNameKey);        String key=generateKey(String.valueOf(o));        if (o!=null){            redisTemplate.delete(userNameKey);            redisTemplate.delete(key);        }    }    private String generateKey(String series) {        return properties.getRememberMeTokenKey() + series;    }}
package com.foru.blog.config.handler;import com.alibaba.fastjson.JSON;import com.foru.blog.constant.CommonConst;import com.foru.blog.constant.MQPrefixConst;import com.foru.blog.constant.OptTypeConst;import com.foru.blog.dao.OperationLogDao;import com.foru.blog.entity.OperationLog;import com.foru.blog.util.IpUtils;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.elasticsearch.common.collect.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationListener;import org.springframework.security.authentication.event.*;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import javax.servlet.http.HttpServletRequest;import java.util.Objects;/** * @ClassName AuthenticationFailureListenerHandler * @Author 9527 */@Componentpublic class AuthenticationFailureListenerHandler implements ApplicationListener<AbstractAuthenticationFailureEvent> {    private OperationLogDao operationLogDao;    private RocketMQTemplate rocketMQTemplate;    @Autowired    public void setOperationLogDao(OperationLogDao operationLogDao) {        this.operationLogDao = operationLogDao;    }    @Autowired    public void setRocketMQTemplate(RocketMQTemplate rocketMQTemplate) {        this.rocketMQTemplate = rocketMQTemplate;    }    private static final String MODULE = "用户登录模块";    private static final String DESC = "用户登录:";    @Override    public void onApplicationEvent(AbstractAuthenticationFailureEvent event) {        String message;        if (event instanceof AuthenticationFailureBadCredentialsEvent) {            //提供的凭据是错误的，用户名或者密码错误            message = "提供的凭据是错误的，用户名或者密码错误";        } else if (event instanceof AuthenticationFailureCredentialsExpiredEvent) {            //验证通过，但是密码过期            message = "验证通过，但是密码过期";        } else if (event instanceof AuthenticationFailureDisabledEvent) {            //验证过了但是账户被禁用            message = "验证过了但是账户被禁用";        } else if (event instanceof AuthenticationFailureExpiredEvent) {            //验证通过了，但是账号已经过期            message = "验证通过了，但是账号已经过期";        } else if (event instanceof AuthenticationFailureLockedEvent) {            //账户被锁定            message = "账户被锁定";        } else if (event instanceof AuthenticationFailureProviderNotFoundEvent) {            //配置错误，没有合适的AuthenticationProvider来处理登录验证            message = "配置错误";        } else if (event instanceof AuthenticationFailureProxyUntrustedEvent) {            // 代理不受信任，用于Oauth、CAS这类三方验证的情形，多属于配置错误            message = "代理不受信任";        } else if (event instanceof AuthenticationFailureServiceExceptionEvent) {            // 其他任何在AuthenticationManager中内部发生的异常都会被封装成此类            message = "内部发生的异常";        } else {            message = "其他未知错误";        }        // 登录账号        Object username = event.getAuthentication().getPrincipal();        // 登录密码        Object credentials = event.getAuthentication().getCredentials();        OperationLog operationLog = new OperationLog();        // 操作模块        operationLog.setOptModule(MODULE);        // 操作类型        operationLog.setOptType(OptTypeConst.LOGIN);        // 操作描述        operationLog.setOptDesc(new StringBuilder().append(DESC).append(CommonConst.FAIL).toString());        // 获取请求的类名        String className = this.getClass().getName();        // 获取请求的方法名        String methodName = new Throwable().getStackTrace()[1].getMethodName();;        methodName = className + "." + methodName;        // 请求方式        HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();        operationLog.setRequestMethod(Objects.requireNonNull(request).getMethod());        // 请求方法        operationLog.setOptMethod(methodName);        // 请求参数        operationLog.setRequestParam(JSON.toJSONString(Map.of(CommonConst.DEFAULT_NICKNAME,username, CommonConst.PASSWORD_FIELD,credentials)));        // 返回结果        operationLog.setResponseData(message);        // 请求用户ID        operationLog.setUserId((int)System.currentTimeMillis());        // 请求用户        operationLog.setNickname((String)username);        // 请求IP        String ipAddress = IpUtils.getIpAddress(request);        operationLog.setIpAddress(ipAddress);        operationLog.setIpSource(IpUtils.getIpSource(ipAddress));        // 请求URL        operationLog.setOptUrl(request.getRequestURI());        //operationLogDao.insert(operationLog);        rocketMQTemplate.convertAndSend(MQPrefixConst.LOG_TOPIC,operationLog);    }}